// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                    String        @id @default(uuid())
  username              String        @unique @db.VarChar(45)
  fullname              String        @db.VarChar(20)
  email                 String        @unique @db.VarChar(45)
  password              String?       @db.VarChar(45)
  refreshToken          String?
  isVerified            Boolean?
  avatar                String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  isGoogleAuthenticated Boolean       @default(false)
  conversation          participant[]
  messages              message[]
}

model message {
  id             String        @id @default(uuid())
  sender         user          @relation(fields: [senderId], references: [id])
  senderId       String
  content        String?
  mediaUrl       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  isRead         Boolean
  conversation   conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  latestMessage  conversation? @relation("LatestMessage", fields: [latestId], references: [id])
  latestId       String?       @unique
}

model conversation {
  id            String        @id @default(uuid())
  creatorId     String
  isGroup       Boolean       @default(false)
  title         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  latestMessage message?      @relation("LatestMessage")
  messages      message[]
  participant   participant[]
}

model participant {
  conversation   conversation @relation(fields: [conversationId], references: [id])
  joinedAt       DateTime     @default(now())
  conversationId String
  user           user         @relation(fields: [userId], references: [id])
  userId         String

  @@id([conversationId, userId])
}
