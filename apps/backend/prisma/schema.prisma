// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                    String        @id @default(cuid())
  username              String        @unique @db.VarChar(45)
  fullname              String        @db.VarChar(20)
  email                 String        @unique @db.VarChar(45)
  password              String?       @db.VarChar(45)
  refreshToken          String?
  isVerified            Boolean?
  avatar                String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  isGoogleAuthenticated Boolean       @default(false)
  conversation          participant[]
  messages              message[]
  account               account?
}

model message {
  id        String   @id @default(cuid())
  sender    user     @relation(fields: [senderId], references: [id])
  senderId  String
  content   String?
  mediaUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  conversation    conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  latestMessage   conversation? @relation("LatestMessage", fields: [latestMessageId], references: [id], onDelete: Cascade)
  latestMessageId String?       @unique
}

model conversation {
  id            String        @id @default(cuid())
  creatorId     String
  isGroup       Boolean       @default(false)
  avatar        String?
  title         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  latestMessage message?      @relation("LatestMessage")
  messages      message[]
  participant   participant[]
}

model participant {
  id                  String       @id @default(cuid())
  conversation        conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  joinedAt            DateTime     @default(now())
  conversationId      String
  user                user         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  isReadByParticipant Boolean      @default(false)
}

model account {
  id            String   @id @default(cuid())
  user          user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String   @unique
  provider      String
  refresh_token String
  access_token  String
  expires_at    Int
  scope         String
  id_token      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}
